// Code generated by "stringer -type=AccessLevel -trimprefix=AccessLevel -linecomment -lower"; DO NOT EDIT.

package users

import "errors"
import "slices"
import "strconv"
import "strings"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AccessLevelNone-0]
	_ = x[AccessLevelViewer-1]
	_ = x[AccessLevelEditor-2]
	_ = x[AccessLevelOwner-3]
}

const _AccessLevel_name = "noneviewereditorowner"

var _AccessLevel_index = [...]uint8{0, 4, 10, 16, 21}

func (i AccessLevel) String() string {
	if i >= AccessLevel(len(_AccessLevel_index)-1) {
		return "AccessLevel(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AccessLevel_name[_AccessLevel_index[i]:_AccessLevel_index[i+1]]
}

func ParseAccessLevel(s string) (AccessLevel, error) {
	idx := strings.Index(_AccessLevel_name, s)
	if idx == -1 {
		var zero AccessLevel
		return zero, errors.New("invalid value")
	}

	value, ok := slices.BinarySearch(_AccessLevel_index[:], uint8(idx))
	if !ok {
		panic("could not find index of string - this should not be possible")
	}

	return AccessLevel(value), nil
}
