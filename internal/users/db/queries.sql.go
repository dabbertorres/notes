// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM notes.users
WHERE
  user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, db DBTX, userID uuid.UUID) error {
	_, err := db.Exec(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
  user_id,
  name,
  created_at,
  last_sign_in,
  active
FROM notes.users
WHERE
  user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, db DBTX, noteID uuid.UUID) (NotesUser, error) {
	row := db.QueryRow(ctx, getUser, noteID)
	var i NotesUser
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.LastSignIn,
		&i.Active,
	)
	return i, err
}

const saveUser = `-- name: SaveUser :exec
INSERT INTO notes.users (
  user_id,
  name,
  created_at,
  last_sign_in,
  active
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) ON CONFLICT (user_id) DO UPDATE
  SET name         = excluded.name,
      last_sign_in = excluded.last_sign_in,
      active       = excluded.active
RETURNING user_id, name, created_at, last_sign_in, active
`

type SaveUserParams struct {
	UserID     uuid.UUID
	Name       string
	CreatedAt  pgtype.Timestamptz
	LastSignIn pgtype.Timestamptz
	Active     bool
}

func (q *Queries) SaveUser(ctx context.Context, db DBTX, arg SaveUserParams) error {
	_, err := db.Exec(ctx, saveUser,
		arg.UserID,
		arg.Name,
		arg.CreatedAt,
		arg.LastSignIn,
		arg.Active,
	)
	return err
}
