// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type NotesAccessLevel string

const (
	NotesAccessLevelOwner  NotesAccessLevel = "owner"
	NotesAccessLevelEditor NotesAccessLevel = "editor"
	NotesAccessLevelViewer NotesAccessLevel = "viewer"
)

func (e *NotesAccessLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NotesAccessLevel(s)
	case string:
		*e = NotesAccessLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for NotesAccessLevel: %T", src)
	}
	return nil
}

type NullNotesAccessLevel struct {
	NotesAccessLevel NotesAccessLevel
	Valid            bool // Valid is true if NotesAccessLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNotesAccessLevel) Scan(value interface{}) error {
	if value == nil {
		ns.NotesAccessLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NotesAccessLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNotesAccessLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NotesAccessLevel), nil
}

func (e NotesAccessLevel) Valid() bool {
	switch e {
	case NotesAccessLevelOwner,
		NotesAccessLevelEditor,
		NotesAccessLevelViewer:
		return true
	}
	return false
}

type NotesTag struct {
	TagID uuid.UUID
	Name  string
}

type NotesUser struct {
	UserID     uuid.UUID
	Name       string
	CreatedAt  pgtype.Timestamptz
	LastSignIn pgtype.Timestamptz
	Active     bool
}
